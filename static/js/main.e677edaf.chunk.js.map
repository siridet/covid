{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","rs","isLoading","item","axios","then","response","setState","data","covid19Stats","console","log","catch","error","style","paddingLeft","this","lastChecked","map","v","index","key","country","confirmed","color","deaths","recovered","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,wKC0D5BC,E,4MArDbC,MAAQ,CACNC,GAAI,GAAIC,WAAW,EAAMC,KAAM,I,kEAEZ,IAAD,OAClBC,IAAM,CACJ,OAAU,MACV,IAAO,kEACP,QAAW,CACT,eAAgB,2BAChB,kBAAmB,iDACnB,iBAAkB,sDACjB,OAAU,CACX,QAAW,cAGZC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAEN,GAAIK,EAASE,KAAKA,OAClC,EAAKD,SAAS,CAAEJ,KAAMG,EAASE,KAAKA,KAAKC,eACzCC,QAAQC,IAAI,EAAKX,MAAMC,GAAGQ,iBAE3BG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAIhB,OAAQ,oCACN,yBAAKC,MAAO,CAAEC,YAAa,MAG3B,4DACA,+BACE,4BAAI,4BAAI,+CAA2B,4BAAKC,KAAKhB,MAAMC,GAAGgB,cAEpDD,KAAKhB,MAAMG,KAAKe,KAAI,SAACC,EAAGC,GACtB,OAAQ,oCACR,wBAAIC,IAAKD,GAAO,4BAAI,0CAAsB,4BAAKD,EAAEG,UACjD,wBAAID,IAAKD,GAAO,4BAAI,4CAAwB,4BAAKD,EAAEI,YACnD,wBAAIF,IAAKD,GAAO,4BAAI,yCAAqB,4BAAI,0BAAMN,MAAO,CAACU,MAAM,QAASL,EAAEM,UAC5E,wBAAIJ,IAAKD,GAAO,4BAAI,4CAAwB,4BAAKD,EAAEO,sB,GAvC7CC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM8B,c","file":"static/js/main.e677edaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nclass App extends Component {\n  state = {\n    rs: {}, isLoading: true, item: []\n  }\n  componentDidMount() {\n    axios({\n      \"method\": \"GET\",\n      \"url\": \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\",\n      \"headers\": {\n        \"content-type\": \"application/octet-stream\",\n        \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"f030d9f76cmsh85365f980e3bf3bp1ee6fdjsn60e298b63f0f\"\n      }, \"params\": {\n        \"country\": \"Thailand\"\n      }\n    })\n      .then((response) => {\n        this.setState({ rs: response.data.data })\n        this.setState({ item: response.data.data.covid19Stats })\n        console.log(this.state.rs.covid19Stats)\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n  render() {\n    return (<>\n      <div style={{ paddingLeft: 20 }}>\n\n      </div>\n      <h3>Covid-19 Daily Repoter v 1.0</h3>\n      <table>\n        <tr><td><b>last checked : </b></td><td>{this.state.rs.lastChecked}</td></tr>\n        {\n          this.state.item.map((v, index) => {\n            return (<>\n            <tr key={index}><td><b>country : </b></td><td>{v.country}</td></tr>\n            <tr key={index}><td><b>confirmed : </b></td><td>{v.confirmed}</td></tr>\n            <tr key={index}><td><b>deaths : </b></td><td><span style={{color:'red'}}>{v.deaths}</span></td></tr>\n            <tr key={index}><td><b>recovered : </b></td><td>{v.recovered}</td></tr> \n           </> \n            )\n          })\n\n        }\n\n      </table>\n\n    </>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}